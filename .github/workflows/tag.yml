name: Manual Deploy by Tag

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select target environment"
        required: true
        type: choice
        options:
          - uat
          - prod
      tag:
        description: "Git tag to deploy (e.g. v1.0.3)"
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Automatically links to the selected GitHub Environment
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: Display info
        run: |
          echo "Deploying tag: ${{ github.event.inputs.tag }}"
          echo "Target environment: ${{ github.event.inputs.environment }}"

      - name: Show environment variable from GitHub Environment
        run: |
          echo "ENV_NAME for ${{ github.event.inputs.environment }}: ${{ vars.ENV_NAME }}"

      - name: Deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" = "uat" ]; then
            echo "âœ… Deploying to UAT..."
            # your UAT deploy logic here
          elif [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            echo "ðŸš€ Deploying to PRODUCTION..."
            # your PROD deploy logic here
          fi
          
      - name: Update GitHub Release notes with deployment info
        if: ${{ github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'uat' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ github.event.inputs.tag }}
          ENV=${{ github.event.inputs.environment }}
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      
          # get the existing release JSON
          release=$(gh api repos/${{ github.repository }}/releases/tags/$TAG)
      
          # extract the release id
          release_id=$(echo "$release" | jq -r .id)
      
          # existing body
          current_body=$(echo "$release" | jq -r .body)
      
          # append a note
          new_body="${current_body}\n\nâœ… **Deployed to ${ENV^^}** on ${NOW}"
      
          # patch the release
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/$release_id \
            -f body="$new_body"
      