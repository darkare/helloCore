name: Manual Deploy by Tag

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select target environment"
        required: true
        type: choice
        options:
          - uat
          - prod
      tag:
        description: "Git tag to deploy (e.g. v1.0.3)"
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Automatically links to the selected GitHub Environment
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: Display info
        run: |
          echo "Deploying tag: ${{ github.event.inputs.tag }}"
          echo "Target environment: ${{ github.event.inputs.environment }}"

      - name: Show environment variable from GitHub Environment
        run: |
          echo "ENV_NAME for ${{ github.event.inputs.environment }}: ${{ vars.ENV_NAME }}"

      - name: Deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" = "uat" ]; then
            echo "‚úÖ Deploying to UAT..."
            # your UAT deploy logic here
          elif [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            echo "üöÄ Deploying to PRODUCTION..."
            # your PROD deploy logic here
          fi

      - name: Update GitHub Release notes with deployment info (including approval notes)
        if: ${{ github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'uat' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ github.event.inputs.tag }}
          ENV=${{ github.event.inputs.environment }}
          NOW=$(date -u +"%Y-%m-%d %H:%M:%SZ")
      
          sudo apt-get update -qq
          sudo apt-get install -y jq gh > /dev/null
      
          # Get the release info
          release_json=$(gh api repos/${{ github.repository }}/releases/tags/$TAG)
          release_id=$(echo "$release_json" | jq -r .id)
          current_body=$(echo "$release_json" | jq -r .body)
      
          # Default values in case no approval notes exist
          reviewer_name="N/A"
          review_comment="N/A"
      
          if [ "$ENV" = "prod" ]; then
            echo "üîç Checking for production environment approval notes..."
      
            # Find the latest deployment that targets 'prod'
            deployment_id=$(gh api repos/${{ github.repository }}/deployments \
              --jq '.[] | select(.environment == "prod") | .id' | head -n 1)
      
            if [ -n "$deployment_id" ]; then
              # Fetch the latest review for this deployment
              review_data=$(gh api repos/${{ github.repository }}/deployments/$deployment_id/reviews --jq '.[-1]')
              if [ -n "$review_data" ]; then
                reviewer_name=$(echo "$review_data" | jq -r '.user.login')
                review_comment=$(echo "$review_data" | jq -r '.comment // "No comment provided"')
              fi
            fi
          fi
      
          new_entry=$(cat <<EOF
          
          ### üü¢ Deployment Record
          - **Environment:** ${ENV^^}
          - **Date:** ${NOW}
          - **Triggered by:** $GITHUB_ACTOR
          - **Reviewer:** ${reviewer_name}
          - **Reviewer Notes:** ${review_comment}
          - **Workflow Run:** [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
          )

          updated_body="${current_body}${new_entry}"
      
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/$release_id \
            -f body="$updated_body"
      
          echo "‚úÖ Release $TAG updated with deployment record for ${ENV^^}"
      